diff -Naur embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hw.h embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hw.h
--- embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hw.h	2021-02-02 16:21:25.161799771 +0000
+++ embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_hw.h	2021-02-02 16:21:25.272799767 +0000
@@ -887,7 +887,6 @@
 
 #if defined(XPAR_PSU_DDR_0_S_AXI_BASEADDR) 	\
 		|| defined(XPAR_PSU_R5_DDR_0_S_AXI_BASEADDR)
-#define XFSBL_PS_DDR
 #endif
 
 #define XFSBL_PS_DDR_START_ADDRESS		(0x0U)
@@ -915,13 +914,11 @@
 #endif
 #endif
 
-#ifdef XFSBL_PS_DDR
 #ifdef ARMR5
 #define XFSBL_PS_DDR_END_ADDRESS		(XPAR_PSU_R5_DDR_0_S_AXI_HIGHADDR)
 #else
 #define XFSBL_PS_DDR_END_ADDRESS		(XPAR_PSU_DDR_0_S_AXI_HIGHADDR)
 #endif
-#endif
 
 #ifdef XFSBL_ENABLE_DDR_SR
 /*
diff -Naur embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_image_header.c embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_image_header.c
--- embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_image_header.c	2021-02-02 16:21:25.162799771 +0000
+++ embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_image_header.c	2021-02-02 16:21:25.274799767 +0000
@@ -504,7 +504,6 @@
 		}
 	}
 
-#ifdef XFSBL_PS_DDR
 	/**
 	 * Check if Address is in the range of PS DDR
 	 */
@@ -524,7 +523,6 @@
 		goto END;
 	}
 #endif
-#endif
 
 #ifdef XFSBL_PL_DDR
 	/**
diff -Naur embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_initialization.c embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_initialization.c
--- embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_initialization.c	2021-02-02 16:21:25.161799771 +0000
+++ embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_initialization.c	2021-02-02 16:21:25.273799767 +0000
@@ -334,10 +334,12 @@
 		}
 #else
 	/* Do ECC Initialization of DDR if required */
+/*    
 	Status = XFsbl_DdrEccInit();
 	if (XFSBL_SUCCESS != Status) {
 		goto END;
 	}
+*/
 #endif
 
 #if defined(XFSBL_PL_CLEAR) && defined(XFSBL_BS)
diff -Naur embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c
--- embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c	2021-02-02 16:21:25.161799771 +0000
+++ embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c	2021-02-02 16:21:25.272799767 +0000
@@ -42,6 +42,170 @@
 static void XFsbl_UpdateMultiBoot(u32 MultiBootValue);
 static void XFsbl_FallBack(void);
 static void XFsbl_MarkUsedRPUCores(XFsblPs *FsblInstPtr, u32 PartitionNum);
+static u32 XFsbl_EccInit_main(u64 DestAddr, u64 LengthBytes);
+static u32 XFsbl_DdrEccInit_main(void);
+
+
+/*****************************************************************************/
+/**
+ * This function does ECC Initialization of memory
+ *
+ * @param	DestAddr is start address from where to calculate ECC
+ * @param	LengthBytes is length in bytes from start address to calculate ECC
+ *
+ * @return
+ * 		- XFSBL_SUCCESS for successful ECC Initialization
+ * 		- errors as mentioned in xfsbl_error.h
+ *
+ *****************************************************************************/
+static u32 XFsbl_EccInit_main(u64 DestAddr, u64 LengthBytes)
+{
+	u32 RegVal;
+	u32 Status;
+	u32 Length;
+	u64 StartAddr = DestAddr;
+	u64 NumBytes = LengthBytes;
+
+	Xil_DCacheDisable();
+
+	while (NumBytes > 0U) {
+		if (NumBytes > ZDMA_TRANSFER_MAX_LEN) {
+			Length = ZDMA_TRANSFER_MAX_LEN;
+		} else {
+			Length = (u32)NumBytes;
+		}
+
+		/* Wait until the DMA is in idle state */
+		do {
+			RegVal = XFsbl_In32(ADMA_CH0_ZDMA_CH_STATUS);
+			RegVal &= ADMA_CH0_ZDMA_CH_STATUS_STATE_MASK;
+		} while ((RegVal != ADMA_CH0_ZDMA_CH_STATUS_STATE_DONE) &&
+				(RegVal != ADMA_CH0_ZDMA_CH_STATUS_STATE_ERR));
+
+		/* Enable Simple (Write Only) Mode */
+		RegVal = XFsbl_In32(ADMA_CH0_ZDMA_CH_CTRL0);
+		RegVal &= (ADMA_CH0_ZDMA_CH_CTRL0_POINT_TYPE_MASK |
+				ADMA_CH0_ZDMA_CH_CTRL0_MODE_MASK);
+		RegVal |= (ADMA_CH0_ZDMA_CH_CTRL0_POINT_TYPE_NORMAL |
+				ADMA_CH0_ZDMA_CH_CTRL0_MODE_WR_ONLY);
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_CTRL0, RegVal);
+
+		/* Fill in the data to be written */
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD0, XFSBL_ECC_INIT_VAL_WORD);
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD1, XFSBL_ECC_INIT_VAL_WORD);
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD2, XFSBL_ECC_INIT_VAL_WORD);
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD3, XFSBL_ECC_INIT_VAL_WORD);
+
+		/* Write Destination Address */
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_DST_DSCR_WORD0,
+				(u32)(StartAddr & ADMA_CH0_ZDMA_CH_DST_DSCR_WORD0_LSB_MASK));
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_DST_DSCR_WORD1,
+				(u32)((StartAddr >> 32U) &
+						ADMA_CH0_ZDMA_CH_DST_DSCR_WORD1_MSB_MASK));
+
+		/* Size to be Transferred. Recommended to set both src and dest sizes */
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_SRC_DSCR_WORD2, Length);
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_DST_DSCR_WORD2, Length);
+
+		/* DMA Enable */
+		RegVal = XFsbl_In32(ADMA_CH0_ZDMA_CH_CTRL2);
+		RegVal |= ADMA_CH0_ZDMA_CH_CTRL2_EN_MASK;
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_CTRL2, RegVal);
+
+		/* Check the status of the transfer by polling on DMA Done */
+		do {
+			RegVal = XFsbl_In32(ADMA_CH0_ZDMA_CH_ISR);
+			RegVal &= ADMA_CH0_ZDMA_CH_ISR_DMA_DONE_MASK;
+		} while (RegVal != ADMA_CH0_ZDMA_CH_ISR_DMA_DONE_MASK);
+
+		/* Clear DMA status */
+		RegVal = XFsbl_In32(ADMA_CH0_ZDMA_CH_ISR);
+		RegVal |= ADMA_CH0_ZDMA_CH_ISR_DMA_DONE_MASK;
+		XFsbl_Out32(ADMA_CH0_ZDMA_CH_ISR, ADMA_CH0_ZDMA_CH_ISR_DMA_DONE_MASK);
+
+		/* Read the channel status for errors */
+		RegVal = XFsbl_In32(ADMA_CH0_ZDMA_CH_STATUS);
+		if (RegVal == ADMA_CH0_ZDMA_CH_STATUS_STATE_ERR) {
+			Status = XFSBL_FAILURE;
+			Xil_DCacheEnable();
+			goto END;
+		}
+
+		NumBytes -= Length;
+		StartAddr += Length;
+	}
+
+	Xil_DCacheEnable();
+
+	/* Restore reset values for the DMA registers used */
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_CTRL0, 0x00000080U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD0, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD1, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD2, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_WR_ONLY_WORD3, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_DST_DSCR_WORD0, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_DST_DSCR_WORD1, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_SRC_DSCR_WORD2, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_DST_DSCR_WORD2, 0x00000000U);
+	XFsbl_Out32(ADMA_CH0_ZDMA_CH_CTRL0_TOTAL_BYTE_COUNT,0x00000000U);
+
+	XFsbl_Printf(DEBUG_INFO,
+			"Address 0x%0lx, Length %0lx, ECC initialized \r\n",
+			DestAddr, LengthBytes);
+
+	Status = XFSBL_SUCCESS;
+END:
+	return Status;
+}
+
+/*****************************************************************************/
+/**
+ * This function does ECC Initialization of DDR memory
+ *
+ * @param none
+ *
+ * @return
+ * 		- XFSBL_SUCCESS for successful ECC Initialization
+ * 		-               or ECC is not enabled for DDR
+ * 		- errors as mentioned in xfsbl_error.h
+ *
+ *****************************************************************************/
+static u32 XFsbl_DdrEccInit_main(void)
+{
+	u32 Status;
+#if XPAR_PSU_DDRC_0_HAS_ECC
+	u64 LengthBytes =
+			(XFSBL_PS_DDR_END_ADDRESS - XFSBL_PS_DDR_INIT_START_ADDRESS) + 1;
+	u64 DestAddr = XFSBL_PS_DDR_INIT_START_ADDRESS;
+
+	XFsbl_Printf(DEBUG_GENERAL,"Initializing DDR ECC\n\r");
+
+	Status = XFsbl_EccInit_main(DestAddr, LengthBytes);
+	if (XFSBL_SUCCESS != Status) {
+		Status = XFSBL_ERROR_DDR_ECC_INIT;
+		XFsbl_Printf(DEBUG_GENERAL,"XFSBL_ERROR_DDR_ECC_INIT\n\r");
+		goto END;
+	}
+
+	/* If there is upper PS DDR, initialize its ECC */
+#ifdef XFSBL_PS_HI_DDR_START_ADDRESS
+	LengthBytes =
+		(XFSBL_PS_HI_DDR_END_ADDRESS - XFSBL_PS_HI_DDR_START_ADDRESS) + 1;
+	DestAddr = XFSBL_PS_HI_DDR_START_ADDRESS;
+
+	Status = XFsbl_EccInit_main(DestAddr, LengthBytes);
+	if (XFSBL_SUCCESS != Status) {
+		Status = XFSBL_ERROR_DDR_ECC_INIT;
+		XFsbl_Printf(DEBUG_GENERAL,"XFSBL_ERROR_DDR_ECC_INIT\n\r");
+		goto END;
+	}
+#endif
+END:
+#else
+	Status = XFSBL_SUCCESS;
+#endif
+	return Status;
+}
 
 /************************** Variable Definitions *****************************/
 XFsblPs FsblInstance={0x3U, XFSBL_SUCCESS, 0U, 0U, 0U};
@@ -58,6 +222,7 @@
 	/**
 	 * Local variables
 	 */
+	u32 Status;
 	u32 FsblStatus = XFSBL_SUCCESS;
 	u32 FsblStage = XFSBL_STAGE1;
 	u32 PartitionNum=0U;
@@ -188,7 +353,7 @@
 				 *  partition parameters
 				 */
 				FsblStatus = XFsbl_PartitionLoad(&FsblInstance,
-								  PartitionNum);
+								  PartitionNum,XIH_PH_ATTRB_DEST_DEVICE_PL);
 				if (XFSBL_SUCCESS != FsblStatus)
 				{
 					/**
@@ -235,17 +400,96 @@
 						XFsbl_Printf(DEBUG_PRINT_ALWAYS, ": Total Time \n\r");
 						XFsbl_Printf(DEBUG_PRINT_ALWAYS, "Note: Total execution time includes print times \n\r");
 #endif
+						/**
+						 * Start the partition loading from 1
+						 * 0th partition will be FSBL
+						 */
+						PartitionNum = 0x1U;
 						FsblStage = XFSBL_STAGE4;
 						EarlyHandoff = FsblStatus;
 
 					}
 				} /* End of else loop for Load Success */
+				Status = XFsbl_DdrEccInit_main();
+				if (XFSBL_SUCCESS != Status) {
+					FsblStatus += XFSBL_ERROR_STAGE_3;
+					FsblStage = XFSBL_STAGE_ERR;
+					break;
+				}
 			} break;
 
 		case XFSBL_STAGE4:
 			{
 
 				XFsbl_Printf(DEBUG_INFO,
+					"======= In Stage 4, Partition No:%d ======= \n\r",
+					PartitionNum);
+
+				/**
+				 * Load the partitions
+				 *  image header
+				 *  partition header
+				 *  partition parameters
+				 */
+
+				FsblStatus = XFsbl_PartitionLoad(&FsblInstance,
+								  PartitionNum,XIH_PH_ATTRB_DEST_DEVICE_NONE);
+				if (XFSBL_SUCCESS != FsblStatus)
+				{
+					/**
+					 * Error
+					 */
+					XFsbl_Printf(DEBUG_GENERAL,"Partition %d Load Failed, 0x%0lx\n\r",
+							PartitionNum, FsblStatus);
+					FsblStatus += XFSBL_ERROR_STAGE_3;
+					FsblStage = XFSBL_STAGE_ERR;
+				} else {
+					XFsbl_Printf(DEBUG_INFO,"Partition %d Load Success \n\r",
+									PartitionNum);
+									
+					XFsbl_MarkUsedRPUCores(&FsblInstance,
+							       PartitionNum);
+					/**
+					 * Check loading all partitions is completed
+					 */
+
+					FsblStatus = XFsbl_CheckEarlyHandoff(&FsblInstance, PartitionNum);
+
+					if (PartitionNum <
+						(FsblInstance.ImageHeader.ImageHeaderTable.NoOfPartitions-1U))
+					{
+						if (TRUE == FsblStatus) {
+							EarlyHandoff = TRUE;
+							FsblStage = XFSBL_STAGE5;
+						}
+						else {
+							/**
+							 * No need to change the Fsbl Stage
+							 * Load the next partition
+							 */
+							PartitionNum++;
+						}
+					} else {
+						/**
+						 * No more partitions present, go to handoff stage
+						 */
+						XFsbl_Printf(DEBUG_INFO,"All Partitions Loaded \n\r");
+
+#ifdef XFSBL_PERF
+						XFsbl_MeasurePerfTime(FsblInstance.PerfTime.tFsblStart);
+						XFsbl_Printf(DEBUG_PRINT_ALWAYS, ": Total Time \n\r");
+						XFsbl_Printf(DEBUG_PRINT_ALWAYS, "Note: Total execution time includes print times \n\r");
+#endif
+						FsblStage = XFSBL_STAGE5;
+						EarlyHandoff = FsblStatus;
+
+					}
+				} /* End of else loop for Load Success */
+				} break;
+
+		case XFSBL_STAGE5:			{
+
+				XFsbl_Printf(DEBUG_INFO,
 						"================= In Stage 4 ============ \n\r");
 
 				/**
diff -Naur embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.h embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.h
--- embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.h	2021-02-02 16:21:25.162799771 +0000
+++ embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.h	2021-02-02 16:21:25.273799767 +0000
@@ -124,8 +124,10 @@
 #define XFSBL_STAGE2		(0x2U)
 #define XFSBL_STAGE3		(0x3U)
 #define XFSBL_STAGE4		(0x4U)
-#define XFSBL_STAGE_ERR		(0x5U)
-#define XFSBL_STAGE_DEFAULT	(0x6U)
+#define XFSBL_STAGE5		(0x5U)
+#define XFSBL_STAGE6		(0x6U)
+#define XFSBL_STAGE_ERR		(0x7U)
+#define XFSBL_STAGE_DEFAULT	(0x8U)
 
 /* A53 MMU definitions */
 
@@ -188,7 +190,7 @@
 /**
  * Functions defined in xfsbl_partition_load.c
  */
-u32 XFsbl_PartitionLoad(XFsblPs * FsblInstancePtr, u32 PartitionNum);
+u32 XFsbl_PartitionLoad(XFsblPs * FsblInstancePtr, u32 PartitionNum, u32 Device);
 u32 XFsbl_PowerUpMemory(u32 MemoryType);
 /**
  * Functions defined in xfsbl_handoff.c
diff -Naur embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_partition_load.c embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_partition_load.c
--- embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_partition_load.c	2021-02-02 16:21:25.164799771 +0000
+++ embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_partition_load.c	2021-02-02 16:21:25.275799767 +0000
@@ -142,9 +142,11 @@
  * 			returns XFSBL_SUCCESS on success
  *
  *****************************************************************************/
-u32 XFsbl_PartitionLoad(XFsblPs * FsblInstancePtr, u32 PartitionNum)
+u32 XFsbl_PartitionLoad(XFsblPs * FsblInstancePtr, u32 PartitionNum,u32 Device)
 {
 	u32 Status;
+	u32 DestinationDevice;
+	XFsblPs_PartitionHeader * PartitionHeader;
 #ifdef ARMR5
 	u32 Index;
 #endif
@@ -168,7 +170,39 @@
 	 * Partition Header Validation
 	 */
 	Status = XFsbl_PartitionHeaderValidation(FsblInstancePtr, PartitionNum);
-
+	/**
+	 * Assign the partition header to local variable
+	 */
+	PartitionHeader = &FsblInstancePtr->ImageHeader.PartitionHeader[PartitionNum];
+	DestinationDevice = XFsbl_GetDestinationDevice(PartitionHeader);
+	if(Device == XIH_PH_ATTRB_DEST_DEVICE_PL)
+	{
+		if(DestinationDevice != XIH_PH_ATTRB_DEST_DEVICE_PL)
+		{
+			Status = XFSBL_SUCCESS;
+			goto END;
+		}
+		else
+		{
+			/**
+			 *  for MISRA C compliance
+			 */
+		}
+	}
+	else
+	{
+		if(DestinationDevice == XIH_PH_ATTRB_DEST_DEVICE_PL)
+		{
+			Status = XFSBL_SUCCESS;
+			goto END;
+		}
+		else
+		{
+			/**
+			 *  for MISRA C compliance
+			 */
+		}
+	}
 	/**
 	 * FSBL is not partition owner and skip this partition
 	 */
diff -Naur embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_qspi.c embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_qspi.c
--- embeddedsw-xilinx-v2020.2/lib/sw_apps/zynqmp_fsbl/src/xfsbl_qspi.c	2021-02-02 16:21:25.160799771 +0000
+++ embeddedsw-xilinx-v2020.2_new/lib/sw_apps/zynqmp_fsbl/src/xfsbl_qspi.c	2021-02-02 16:21:25.272799767 +0000
@@ -895,6 +895,7 @@
 	s32 Status;
 	u32 QspiMode;
 	u32 UStatus;
+	u8 Prescaler;
 
 
 
@@ -929,8 +930,14 @@
 	/*
 	 * Set the pre-scaler for QSPI clock
 	 */
-	Status = XQspiPsu_SetClkPrescaler(&QspiPsuInstance, XQSPIPSU_CLK_PRESCALE_8);
+	if((XPAR_PSU_QSPI_0_QSPI_CLK_FREQ_HZ/2) < 63000000)
+		Prescaler = XQSPIPSU_CLK_PRESCALE_2;
+	else if((XPAR_PSU_QSPI_0_QSPI_CLK_FREQ_HZ/4) < 63000000)
+		Prescaler = XQSPIPSU_CLK_PRESCALE_4;
+	else
+		Prescaler = XQSPIPSU_CLK_PRESCALE_8;
 
+	Status = XQspiPsu_SetClkPrescaler(&QspiPsuInstance, Prescaler);
 	if (Status != XFSBL_SUCCESS) {
 		UStatus = XFSBL_ERROR_QSPI_PRESCALER_CLK;
 		XFsbl_Printf(DEBUG_GENERAL,"XFSBL_ERROR_QSPI_PRESCALER_CLK\r\n");
